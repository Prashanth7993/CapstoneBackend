trigger: none
variables:
  dockerRegistryServiceConnection: '33380ad7-f270-4c23-a0ba-269ed94a5ce5'
  sonarQubeServiceConnection: 'sonar'
  azureServiceConnection: 'prashanthscn'
  imageRepository: 'service-registry'
  containerRegistry: 'mysharedacr1234.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/Backend/service-registry/Dockerfile'
  tag: '1.1.0'
  workingDirectory: '$(Build.SourcesDirectory)/Backend/service-registry'

stages:
- stage: Build
  displayName: CI Build, Test & Sonar Analysis
  jobs:
  - job: BuildAndTest
    displayName: Build, Test, Coverage, Sonar
    pool:
      name: Default

    steps:
    - checkout: self
      fetchDepth: 0

    - script: |
        echo "Installing Java 17 and Maven..."
        sudo apt-get update -y
        sudo apt-get install -y openjdk-17-jdk maven
        java -version
        mvn -version
      displayName: 'Install Java and Maven'
    
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'sonar'
        organization: 'devuser09'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'devuser09_CapStone-Project-Azure'
        cliProjectName: 'CapStone-Project-Azure'
        extraProperties: |
          sonar.projectBaseDir=$(Build.SourcesDirectory)/Backend/service-registry
          sonar.java.binaries=target/classes
          sonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
          sonar.sources=src/main/java
          sonar.tests=src/test/java

    - script: |
        cd $(workingDirectory)
        mvn clean verify
      displayName: 'Run Unit Tests'

    - task: SonarCloudAnalyze@1
      displayName: 'Run SonarCloud Analysis'

    - task: SonarCloudPublish@1
      displayName: 'Check Quality Gate'
      inputs:
        pollingTimeoutSec: '300'

    


    - script: |
        echo "Running Tests and Code Coverage..."
        cd $(workingDirectory)
        mvn clean verify
      displayName: 'Maven Test & Coverage'
    - task: PublishPipelineArtifact@1
      displayName: 'Publish JAR Artifact'
      inputs:
        targetPath: '$(workingDirectory)/target/service-registry.jar'
        artifact: 'service-registry'
        publishLocation: 'pipeline'

- stage: ArtifactBuild
  dependsOn: Build
  displayName: Docker Build and Push
  jobs:
  - job: Dockerize
    displayName: Build Docker Image from Artifact
    pool:
      name: Default

    steps:
    - download: current
      artifact: service-registry

    - task: Docker@2
      displayName: 'Build and Push Docker Image to ACR'
      inputs:
        command: 'buildAndPush'
        repository: '$(imageRepository)'
        dockerfile: '$(dockerfilePath)'
        containerRegistry: '$(dockerRegistryServiceConnection)'
        tags: |
          $(tag)
- stage: SecurityScan
  displayName: Trivy Vulnerability Scan
  dependsOn: Build         
  condition: succeeded()

  jobs:
  - job: TrivyScan
    displayName: Scan Docker image with Trivy
    pool:
      name: Default         
    steps:
    
    - bash: |
        set -e
        echo "Installing Trivy CLI…"
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -
      displayName: "Install Trivy"

        - task: AzureCLI@2
      displayName: "az acr login"
      inputs:
        azureSubscription: '$(azureServiceConnection)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          # extract ACR name from the fully-qualified registry URL
          ACR_NAME="$(echo $(containerRegistry) | cut -d'.' -f1)"
          az acr login --name "$ACR_NAME"

       - bash: |
        set -e
        IMAGE="$(containerRegistry)/$(imageRepository):$(tag)"
        echo "Scanning $IMAGE …"
        trivy image \
          --cache-dir $(Pipeline.Workspace)/trivy-cache \
          --severity HIGH,CRITICAL \          
          --exit-code 1 \                     
          --format sarif --output trivy-report.sarif \
          "$IMAGE"
      displayName: "Trivy image scan"
